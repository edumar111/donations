'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _crowdfund = require('../ethereum/crowdfund');

var _crowdfund2 = _interopRequireDefault(_crowdfund);

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/Edumar/CURSOS/BLOCKCHAIN/donaciones/components/ContributeForm.js';


var ContributeForm = function (_Component) {
  (0, _inherits3.default)(ContributeForm, _Component);

  function ContributeForm() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, ContributeForm);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ContributeForm.__proto__ || (0, _getPrototypeOf2.default)(ContributeForm)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: '',
      errorMessage: '',
      loading: false
    }, _this.onSubmit = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
        var crowdfund, accounts;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                event.preventDefault();

                crowdfund = (0, _crowdfund2.default)(_this.props.address);

                _this.setState({ loading: true, errorMessage: '' });

                _context.prev = 3;
                _context.next = 6;
                return _web2.default.eth.getAccounts();

              case 6:
                accounts = _context.sent;
                _context.next = 9;
                return crowdfund.methods.contribute().send({
                  from: accounts[0],
                  value: _web2.default.utils.toWei(_this.state.value, 'ether')
                });

              case 9:

                _routes.Router.replaceRoute('/crowdfunds/' + _this.props.address);
                _context.next = 15;
                break;

              case 12:
                _context.prev = 12;
                _context.t0 = _context['catch'](3);

                _this.setState({ errorMessage: _context.t0.message });

              case 15:

                _this.setState({ loading: false, value: '' });

              case 16:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2, [[3, 12]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(ContributeForm, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 38
        }
      }, _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 39
        }
      }, _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 40
        }
      }, 'Amount to Contribute'), _react2.default.createElement(_semanticUiReact.Input, {
        value: this.state.value,
        onChange: function onChange(event) {
          return _this3.setState({ value: event.target.value });
        },
        label: 'ether',
        labelPosition: 'right',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 41
        }
      })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Oops!', content: this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 49
        }
      }), _react2.default.createElement(_semanticUiReact.Button, { primary: true, loading: this.state.loading, __source: {
          fileName: _jsxFileName,
          lineNumber: 50
        }
      }, 'Contribute!'));
    }
  }]);

  return ContributeForm;
}(_react.Component);

exports.default = ContributeForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ29udHJpYnV0ZUZvcm0iLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsInZhbHVlIiwiZXJyb3JNZXNzYWdlIiwibG9hZGluZyIsIm9uU3VibWl0IiwiX3JlZjIiLCJtYXJrIiwiX2NhbGxlZSIsImV2ZW50IiwiY3Jvd2RmdW5kIiwiYWNjb3VudHMiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwicHJldmVudERlZmF1bHQiLCJwcm9wcyIsImFkZHJlc3MiLCJzZXRTdGF0ZSIsImV0aCIsImdldEFjY291bnRzIiwic2VudCIsIm1ldGhvZHMiLCJjb250cmlidXRlIiwic2VuZCIsImZyb20iLCJ1dGlscyIsInRvV2VpIiwicmVwbGFjZVJvdXRlIiwidDAiLCJtZXNzYWdlIiwic3RvcCIsIl94Iiwia2V5IiwicmVuZGVyIiwiX3RoaXMzIiwiY3JlYXRlRWxlbWVudCIsImVycm9yIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJGaWVsZCIsIm9uQ2hhbmdlIiwidGFyZ2V0IiwibGFiZWwiLCJsYWJlbFBvc2l0aW9uIiwiaGVhZGVyIiwiY29udGVudCIsInByaW1hcnkiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFMQSxJQUFJQSxlQUFlLHlFQUFuQjs7O0FBT0EsSUFBSUMsaUJBQWlCLFVBQVVDLFVBQVYsRUFBc0I7QUFDekMsMEJBQVVELGNBQVYsRUFBMEJDLFVBQTFC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