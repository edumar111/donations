'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _routes = require('../../../routes');

var _Layout = require('../../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _crowdfund = require('../../../ethereum/crowdfund');

var _crowdfund2 = _interopRequireDefault(_crowdfund);

var _ExpenditureRow = require('../../../components/ExpenditureRow');

var _ExpenditureRow2 = _interopRequireDefault(_ExpenditureRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/Edumar/CURSOS/BLOCKCHAIN/donaciones/pages/crowdfunds/expenditures/index.js?entry';


var ExpenditureIndex = function (_Component) {
  (0, _inherits3.default)(ExpenditureIndex, _Component);

  function ExpenditureIndex() {
    (0, _classCallCheck3.default)(this, ExpenditureIndex);

    return (0, _possibleConstructorReturn3.default)(this, (ExpenditureIndex.__proto__ || (0, _getPrototypeOf2.default)(ExpenditureIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(ExpenditureIndex, [{
    key: 'renderRows',
    value: function renderRows() {
      var _this2 = this;

      return this.props.expenditures.map(function (expenditure, index) {
        return _react2.default.createElement(_ExpenditureRow2.default, {
          key: index,
          id: index,
          expenditure: expenditure,
          address: _this2.props.address,
          approversCount: _this2.props.approversCount,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 29
          }
        });
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var Header = _semanticUiReact.Table.Header,
          Row = _semanticUiReact.Table.Row,
          HeaderCell = _semanticUiReact.Table.HeaderCell,
          Body = _semanticUiReact.Table.Body;

      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 45
        }
      }, 'Expenditures'), _react2.default.createElement(_routes.Link, { route: '/crowdfunds/' + this.props.address + '/expenditures/new', __source: {
          fileName: _jsxFileName,
          lineNumber: 46
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 47
        }
      }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, floated: 'right', style: { marginBottom: 10 }, __source: {
          fileName: _jsxFileName,
          lineNumber: 48
        }
      }, 'Add Expenditure'))), _react2.default.createElement(_semanticUiReact.Table, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 53
        }
      }, _react2.default.createElement(Header, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 54
        }
      }, _react2.default.createElement(Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 55
        }
      }, _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 56
        }
      }, 'ID'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 57
        }
      }, 'Description'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 58
        }
      }, 'Amount'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 59
        }
      }, 'Recipient'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 60
        }
      }, 'Approval Count'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 61
        }
      }, 'Approve'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 62
        }
      }, 'Finalize'))), _react2.default.createElement(Body, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 65
        }
      }, this.renderRows())), _react2.default.createElement('div', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 67
        }
      }, 'Found ', this.props.expenditureCount, ' expenditures.'));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
        var address, crowdfund, expenditureCount, approversCount, expenditures;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                address = props.query.address;
                crowdfund = (0, _crowdfund2.default)(address);
                _context.next = 4;
                return crowdfund.methods.getExpendituresCount().call();

              case 4:
                expenditureCount = _context.sent;
                _context.next = 7;
                return crowdfund.methods.approversCount().call();

              case 7:
                approversCount = _context.sent;
                _context.next = 10;
                return _promise2.default.all(Array(parseInt(expenditureCount)).fill().map(function (element, index) {
                  return crowdfund.methods.expenditures(index).call();
                }));

              case 10:
                expenditures = _context.sent;
                return _context.abrupt('return', { address: address, expenditures: expenditures, expenditureCount: expenditureCount, approversCount: approversCount });

              case 12:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps(_x) {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return ExpenditureIndex;
}(_react.Component);

exports.default = ExpenditureIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiRXhwZW5kaXR1cmVJbmRleCIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyUm93cyIsIl90aGlzMiIsInByb3BzIiwiZXhwZW5kaXR1cmVzIiwibWFwIiwiZXhwZW5kaXR1cmUiLCJpbmRleCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsImFkZHJlc3MiLCJhcHByb3ZlcnNDb3VudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmVuZGVyIiwiSGVhZGVyIiwiUm93IiwiSGVhZGVyQ2VsbCIsIkJvZHkiLCJyb3V0ZSIsInByaW1hcnkiLCJmbG9hdGVkIiwic3R5bGUiLCJtYXJnaW5Cb3R0b20iLCJleHBlbmRpdHVyZUNvdW50IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwiY3Jvd2RmdW5kIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInF1ZXJ5IiwibWV0aG9kcyIsImdldEV4cGVuZGl0dXJlc0NvdW50IiwiY2FsbCIsInNlbnQiLCJhbGwiLCJBcnJheSIsInBhcnNlSW50IiwiZmlsbCIsImVsZW1lbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIiwiX3giXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBTkEsSUFBSUEsZUFBZSx5RkFBbkI7OztBQVFBLElBQUlDLG1CQUFtQixVQUFVQyxVQUFWLEVBQXNCO0FBQzNDLDBCQUFVRCxnQkFBVixFQUE0QkMsVUFBNUI7O0FBRUEsV0FBU0QsZ0JBQVQsR0FBNEI7QUFDMUIsa0NBQWdCLElBQWhCLEVBQXNCQSxnQkFBdEI7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