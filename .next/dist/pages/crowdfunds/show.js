'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _crowdfund = require('../../ethereum/crowdfund');

var _crowdfund2 = _interopRequireDefault(_crowdfund);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _ContributeForm = require('../../components/ContributeForm');

var _ContributeForm2 = _interopRequireDefault(_ContributeForm);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/Edumar/CURSOS/BLOCKCHAIN/donaciones/pages/crowdfunds/show.js?entry';


var CrowdfundShow = function (_Component) {
  (0, _inherits3.default)(CrowdfundShow, _Component);

  function CrowdfundShow() {
    (0, _classCallCheck3.default)(this, CrowdfundShow);

    return (0, _possibleConstructorReturn3.default)(this, (CrowdfundShow.__proto__ || (0, _getPrototypeOf2.default)(CrowdfundShow)).apply(this, arguments));
  }

  (0, _createClass3.default)(CrowdfundShow, [{
    key: 'renderCards',
    value: function renderCards() {
      var _props = this.props,
          balance = _props.balance,
          manager = _props.manager,
          minimumContribution = _props.minimumContribution,
          expendituresCount = _props.expendituresCount,
          approversCount = _props.approversCount;

      var items = [{
        header: manager,
        meta: 'Address of Manager',
        description: 'The manager created this Crowdfund and can create Expenditures to withdraw money',
        style: { overflowWrap: 'break-word' }
      }, {
        header: minimumContribution,
        meta: 'Minimum Contribution (wei)',
        description: 'You must contribute at least this much wei to become an approver'
      }, {
        header: expendituresCount,
        meta: 'Number of Expenditures',
        description: 'A request tries to withdraw money from the contract. Expenditures must be approved by approvers'
      }, {
        header: approversCount,
        meta: 'Number of Approvers',
        description: 'Number of people who have already donated to this crowdfund'
      }, {
        header: _web2.default.utils.fromWei(balance, 'ether'),
        meta: 'Crowdfund Balance (ether)',
        description: 'The balance is how much money this crowdfund has left to spend.'
      }];

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 68
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 73
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 74
        }
      }, 'Crowdfund Show'), _react2.default.createElement(_semanticUiReact.Grid, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 75
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 76
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 10, __source: {
          fileName: _jsxFileName,
          lineNumber: 77
        }
      }, this.renderCards()), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 6, __source: {
          fileName: _jsxFileName,
          lineNumber: 79
        }
      }, _react2.default.createElement(_ContributeForm2.default, { address: this.props.address, __source: {
          fileName: _jsxFileName,
          lineNumber: 80
        }
      }))), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 84
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 85
        }
      }, _react2.default.createElement(_routes.Link, { route: '/crowdfunds/' + this.props.address + '/expenditures', __source: {
          fileName: _jsxFileName,
          lineNumber: 86
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 87
        }
      }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      }, 'View Expenditures')))))));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
        var crowdfund, summary;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                crowdfund = (0, _crowdfund2.default)(props.query.address);
                _context.next = 3;
                return crowdfund.methods.getSummary().call();

              case 3:
                summary = _context.sent;
                return _context.abrupt('return', {
                  address: props.query.address,
                  minimumContribution: summary[0],
                  balance: summary[1],
                  expendituresCount: summary[2],
                  approversCount: summary[3],
                  manager: summary[4]
                });

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps(_x) {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return CrowdfundShow;
}(_react.Component);

exports.default = CrowdfundShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ3Jvd2RmdW5kU2hvdyIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyQ2FyZHMiLCJfcHJvcHMiLCJwcm9wcyIsImJhbGFuY2UiLCJtYW5hZ2VyIiwibWluaW11bUNvbnRyaWJ1dGlvbiIsImV4cGVuZGl0dXJlc0NvdW50IiwiYXBwcm92ZXJzQ291bnQiLCJpdGVtcyIsImhlYWRlciIsIm1ldGEiLCJkZXNjcmlwdGlvbiIsInN0eWxlIiwib3ZlcmZsb3dXcmFwIiwidXRpbHMiLCJmcm9tV2VpIiwiY3JlYXRlRWxlbWVudCIsIkdyb3VwIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJyZW5kZXIiLCJSb3ciLCJDb2x1bW4iLCJ3aWR0aCIsImFkZHJlc3MiLCJyb3V0ZSIsInByaW1hcnkiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJjcm93ZGZ1bmQiLCJzdW1tYXJ5Iiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInF1ZXJ5IiwibWV0aG9kcyIsImdldFN1bW1hcnkiLCJjYWxsIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiLCJfeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFQQSxJQUFJQSxlQUFlLDJFQUFuQjs7O0FBU0EsSUFBSUMsZ0JBQWdCLFVBQVVDLFVBQVYsRUFBc0I7QUFDeEMsMEJBQVVELGFBQVYsRUFBeUJDLFVBQXpCOztBQUVBLFdBQVNELGFBQVQsR0FBeUI7QUFDdkIsa0NBQWdCLElBQWhCLEVBQXNCQSxhQUF0Qjs7QUFFQSxXQUFP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S0FBTixDQUFZYixPQUF0QixDQUFaO0FBQ0FVLHlCQUFTRSxJQUFULEdBQWdCLENBQWhCO0FBQ0EsdUJBQU9OLFVBQVVRLE9BQVYsQ0FBa0JDLFVBQWxCLEdBQStCQyxJQUEvQixFQUFQOztBQUVGLG1CQUFLLENBQUw7QUFDRVQsMEJBQVVHLFNBQVNPLElBQW5CO0FBQ0EsdUJBQU9QLFNBQVNRLE1BQVQsQ0FBZ0IsUUFBaEIsRUFBMEI7QUFDL0JsQiwyQkFBU3ZCLE1BQU1vQyxLQUFOLENBQVliLE9BRFU7QUFFL0JwQix1Q0FBcUIyQixRQUFRLENBQVIsQ0FGVTtBQUcvQjdCLDJCQUFTNkIsUUFBUSxDQUFSLENBSHNCO0FBSS9CMUIscUNBQW1CMEIsUUFBUSxDQUFSLENBSlk7QUFLL0J6QixrQ0FBZ0J5QixRQUFRLENBQVIsQ0FMZTtBQU0vQjVCLDJCQUFTNEIsUUFBUSxDQUFSO0FBTnNCLGlCQUExQixDQUFQOztBQVNGLG1CQUFLLENBQUw7QUFDQSxtQkFBSyxLQUFMO0FBQ0UsdUJBQU9HLFNBQVNTLElBQVQsRUFBUDtBQW5CSjtBQXFCRDtBQUNGLFNBeEJNLEVBd0JKZCxPQXhCSSxFQXdCSyxJQXhCTCxDQUFQO0FBeUJELE9BM0IwQyxDQUFoQyxDQUFYOztBQTZCQSxlQUFTZSxlQUFULENBQXlCQyxFQUF6QixFQUE2QjtBQUMzQixlQUFPbEIsS0FBS2hDLEtBQUwsQ0FBVyxJQUFYLEVBQWlCQyxTQUFqQixDQUFQO0FBQ0Q7O0FBRUQsYUFBT2dELGVBQVA7QUFDRCxLQW5DTTtBQUZKLEdBQUQsQ0FuSko7O0FBMkxBLFNBQU9wRCxhQUFQO0FBQ0QsQ0FyTW1CLGtCQUFwQjs7a0JBdU1lQSxhIiwiZmlsZSI6InVua25vd24iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX3JlZ2VuZXJhdG9yUnVudGltZSBmcm9tICdiYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yJztcbmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvcic7XG5pbXBvcnQgX09iamVjdCRnZXRQcm90b3R5cGVPZiBmcm9tICdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbnZhciBfanN4RmlsZU5hbWUgPSAnL1VzZXJzL0VkdW1hci9DVVJTT1MvQkxPQ0tDSEFJTi9kb25hY2lvbmVzL3BhZ2VzL2Nyb3dkZnVuZHMvc2hvdy5qcz9lbnRyeSc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ2FyZCwgR3JpZCwgQnV0dG9uIH0gZnJvbSAnc2VtYW50aWMtdWktcmVhY3QnO1xuaW1wb3J0IExheW91dCBmcm9tICcuLi8uLi9jb21wb25lbnRzL0xheW91dCc7XG5pbXBvcnQgQ3Jvd2RmdW5kIGZyb20gJy4uLy4uL2V0aGVyZXVtL2Nyb3dkZnVuZCc7XG5pbXBvcnQgd2ViMyBmcm9tICcuLi8uLi9ldGhlcmV1bS93ZWIzJztcbmltcG9ydCBDb250cmlidXRlRm9ybSBmcm9tICcuLi8uLi9jb21wb25lbnRzL0NvbnRyaWJ1dGVGb3JtJztcbmltcG9ydCB7IExpbmsgfSBmcm9tICcuLi8uLi9yb3V0ZXMnO1xuXG52YXIgQ3Jvd2RmdW5kU2hvdyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDcm93ZGZ1bmRTaG93LCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDcm93ZGZ1bmRTaG93KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDcm93ZGZ1bmRTaG93KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ3Jvd2RmdW5kU2hvdy5fX3Byb3RvX18gfHwgX09iamVjdCRnZXRQcm90b3R5cGVPZihDcm93ZGZ1bmRTaG93KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ3Jvd2RmdW5kU2hvdywgW3tcbiAgICBrZXk6ICdyZW5kZXJDYXJkcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckNhcmRzKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYmFsYW5jZSA9IF9wcm9wcy5iYWxhbmNlLFxuICAgICAgICAgIG1hbmFnZXIgPSBfcHJvcHMubWFuYWdlcixcbiAgICAgICAgICBtaW5pbXVtQ29udHJpYnV0aW9uID0gX3Byb3BzLm1pbmltdW1Db250cmlidXRpb24sXG4gICAgICAgICAgZXhwZW5kaXR1cmVzQ291bnQgPSBfcHJvcHMuZXhwZW5kaXR1cmVzQ291bnQsXG4gICAgICAgICAgYXBwcm92ZXJzQ291bnQgPSBfcHJvcHMuYXBwcm92ZXJzQ291bnQ7XG5cblxuICAgICAgdmFyIGl0ZW1zID0gW3tcbiAgICAgICAgaGVhZGVyOiBtYW5hZ2VyLFxuICAgICAgICBtZXRhOiAnQWRkcmVzcyBvZiBNYW5hZ2VyJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgbWFuYWdlciBjcmVhdGVkIHRoaXMgQ3Jvd2RmdW5kIGFuZCBjYW4gY3JlYXRlIEV4cGVuZGl0dXJlcyB0byB3aXRoZHJhdyBtb25leScsXG4gICAgICAgIHN0eWxlOiB7IG92ZXJmbG93V3JhcDogJ2JyZWFrLXdvcmQnIH1cbiAgICAgIH0sIHtcbiAgICAgICAgaGVhZGVyOiBtaW5pbXVtQ29udHJpYnV0aW9uLFxuICAgICAgICBtZXRhOiAnTWluaW11bSBDb250cmlidXRpb24gKHdlaSknLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1lvdSBtdXN0IGNvbnRyaWJ1dGUgYXQgbGVhc3QgdGhpcyBtdWNoIHdlaSB0byBiZWNvbWUgYW4gYXBwcm92ZXInXG4gICAgICB9LCB7XG4gICAgICAgIGhlYWRlcjogZXhwZW5kaXR1cmVzQ291bnQsXG4gICAgICAgIG1ldGE6ICdOdW1iZXIgb2YgRXhwZW5kaXR1cmVzJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdBIHJlcXVlc3QgdHJpZXMgdG8gd2l0aGRyYXcgbW9uZXkgZnJvbSB0aGUgY29udHJhY3QuIEV4cGVuZGl0dXJlcyBtdXN0IGJlIGFwcHJvdmVkIGJ5IGFwcHJvdmVycydcbiAgICAgIH0sIHtcbiAgICAgICAgaGVhZGVyOiBhcHByb3ZlcnNDb3VudCxcbiAgICAgICAgbWV0YTogJ051bWJlciBvZiBBcHByb3ZlcnMnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ051bWJlciBvZiBwZW9wbGUgd2hvIGhhdmUgYWxyZWFkeSBkb25hdGVkIHRvIHRoaXMgY3Jvd2RmdW5kJ1xuICAgICAgfSwge1xuICAgICAgICBoZWFkZXI6IHdlYjMudXRpbHMuZnJvbVdlaShiYWxhbmNlLCAnZXRoZXInKSxcbiAgICAgICAgbWV0YTogJ0Nyb3dkZnVuZCBCYWxhbmNlIChldGhlciknLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1RoZSBiYWxhbmNlIGlzIGhvdyBtdWNoIG1vbmV5IHRoaXMgY3Jvd2RmdW5kIGhhcyBsZWZ0IHRvIHNwZW5kLidcbiAgICAgIH1dO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDYXJkLkdyb3VwLCB7IGl0ZW1zOiBpdGVtcywgX19zb3VyY2U6IHtcbiAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgIGxpbmVOdW1iZXI6IDY4XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBMYXlvdXQsXG4gICAgICAgIHtcbiAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgIGxpbmVOdW1iZXI6IDczXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdoMycsXG4gICAgICAgICAge1xuICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgbGluZU51bWJlcjogNzRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgICdDcm93ZGZ1bmQgU2hvdydcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBHcmlkLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDc1XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgR3JpZC5Sb3csXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA3NlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgR3JpZC5Db2x1bW4sXG4gICAgICAgICAgICAgIHsgd2lkdGg6IDEwLCBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDc3XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB0aGlzLnJlbmRlckNhcmRzKClcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBHcmlkLkNvbHVtbixcbiAgICAgICAgICAgICAgeyB3aWR0aDogNiwgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA3OVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChDb250cmlidXRlRm9ybSwgeyBhZGRyZXNzOiB0aGlzLnByb3BzLmFkZHJlc3MsIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogODBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgR3JpZC5Sb3csXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA4NFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgR3JpZC5Db2x1bW4sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDg1XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIExpbmssXG4gICAgICAgICAgICAgICAgeyByb3V0ZTogJy9jcm93ZGZ1bmRzLycgKyB0aGlzLnByb3BzLmFkZHJlc3MgKyAnL2V4cGVuZGl0dXJlcycsIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDg2XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgJ2EnLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogODdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIEJ1dHRvbixcbiAgICAgICAgICAgICAgICAgICAgeyBwcmltYXJ5OiB0cnVlLCBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDg4XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnVmlldyBFeHBlbmRpdHVyZXMnXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHByb3BzKSB7XG4gICAgICAgIHZhciBjcm93ZGZ1bmQsIHN1bW1hcnk7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgY3Jvd2RmdW5kID0gQ3Jvd2RmdW5kKHByb3BzLnF1ZXJ5LmFkZHJlc3MpO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzO1xuICAgICAgICAgICAgICAgIHJldHVybiBjcm93ZGZ1bmQubWV0aG9kcy5nZXRTdW1tYXJ5KCkuY2FsbCgpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBzdW1tYXJ5ID0gX2NvbnRleHQuc2VudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCdyZXR1cm4nLCB7XG4gICAgICAgICAgICAgICAgICBhZGRyZXNzOiBwcm9wcy5xdWVyeS5hZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgbWluaW11bUNvbnRyaWJ1dGlvbjogc3VtbWFyeVswXSxcbiAgICAgICAgICAgICAgICAgIGJhbGFuY2U6IHN1bW1hcnlbMV0sXG4gICAgICAgICAgICAgICAgICBleHBlbmRpdHVyZXNDb3VudDogc3VtbWFyeVsyXSxcbiAgICAgICAgICAgICAgICAgIGFwcHJvdmVyc0NvdW50OiBzdW1tYXJ5WzNdLFxuICAgICAgICAgICAgICAgICAgbWFuYWdlcjogc3VtbWFyeVs0XVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7XG4gICAgICB9KSk7XG5cbiAgICAgIGZ1bmN0aW9uIGdldEluaXRpYWxQcm9wcyhfeCkge1xuICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0SW5pdGlhbFByb3BzO1xuICAgIH0oKVxuICB9XSk7XG5cbiAgcmV0dXJuIENyb3dkZnVuZFNob3c7XG59KENvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IENyb3dkZnVuZFNob3c7Il19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ3Jvd2RmdW5kU2hvdyIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyQ2FyZHMiLCJfcHJvcHMiLCJwcm9wcyIsImJhbGFuY2UiLCJtYW5hZ2VyIiwibWluaW11bUNvbnRyaWJ1dGlvbiIsImV4cGVuZGl0dXJlc0NvdW50IiwiYXBwcm92ZXJzQ291bnQiLCJpdGVtcyIsImhlYWRlciIsIm1ldGEiLCJkZXNjcmlwdGlvbiIsInN0eWxlIiwib3ZlcmZsb3dXcmFwIiwidXRpbHMiLCJmcm9tV2VpIiwiY3JlYXRlRWxlbWVudCIsIkdyb3VwIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJyZW5kZXIiLCJSb3ciLCJDb2x1bW4iLCJ3aWR0aCIsImFkZHJlc3MiLCJyb3V0ZSIsInByaW1hcnkiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJjcm93ZGZ1bmQiLCJzdW1tYXJ5Iiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInF1ZXJ5IiwibWV0aG9kcyIsImdldFN1bW1hcnkiLCJjYWxsIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiLCJfeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFQQSxJQUFJQSxlQUFlLDJFQUFuQjs7O0FBU0EsSUFBSUMsZ0JBQWdCLFVBQVVDLFVBQVYsRUFBc0I7QUFDeEMsMEJBQVVELGFBQVYsRUFBeUJDLFVBQXpCOztBQUVBLFdBQVNELGFBQVQsR0FBeUI7QUFDdkIsa0NBQWdCLElBQWhCLEVBQXNCQSxhQUF0Qjs7QUFFQSxXQUFP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